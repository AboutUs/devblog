<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
  <title>Dev @ AboutUs.org </title>
  <link href="http://dev.aboutus.org/"/>
  <link type="application/atom+xml" rel="self" href="http://dev.aboutus.org/atom.xml"/>
  <updated>2011-04-18T21:41:41-07:00</updated>
  <id>http://dev.aboutus.org/</id>
  <author>
    <name>AboutUs</name>
    <email>info@aboutus.org</email>
  </author>

  
  <entry>
    <id>http://dev.aboutus.org/2011/04/18/sort-==-srot</id>
    <link type="text/html" rel="alternate" href="http://dev.aboutus.org/2011/04/18/sort-%3D%3D-srot.html"/>
    <title>Sort == Srot</title>
    <updated>2011-04-18T00:00:00-07:00</updated>
    <author>
      <name>thomas</name>
      <uri>http://dev.aboutus.org/</uri>
    </author>
    <content type="html">&lt;p&gt;This may be something well-known to a lot of people, but it&amp;#8217;s one that I just recently found out about. We were working with large volumes of data for our &lt;a href='http://www.aboutus.org/Learn/Keep-Track-of-Inbound-Links'&gt;redirectory&lt;/a&gt; feature on (http://www.aboutus.org). For part of this we had to sort about 100 GB of tab-separtated data. Because we wanted to do the simplest thing that would work, GNU &lt;code&gt;sort&lt;/code&gt; came to the rescue.&lt;/p&gt;

&lt;p&gt;For those of you who aren&amp;#8217;t familiar with &lt;code&gt;sort&lt;/code&gt;, it is a standard UNIX/Linux tool that sorts the input it gets on standard in, and returns the new list on stdout. It has all kinds of options to control the sort order, algorithms used, etc., but some of them aren&amp;#8217;t too obvious. For the basic list, check out the &lt;a href='http://linux.die.net/man/1/sort'&gt;man-page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before I go on, a brief exercise. Lexically sor the following lines:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; foo
 far
 f.o&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you guessed &amp;#8220;f,o, far, foo&amp;#8221;, congratulations! You&amp;#8217;re a sane, normal person. If, on the other hand, you guess &amp;#8220;far, f.o, foo&amp;#8221;, you are GNU &lt;code&gt;sort&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This was a serious problem for us because it meant that some of our data was out of order, making our processing scripts angry. We would have &lt;code&gt;go-daddy.com&lt;/code&gt; stuffed in the middle of a long list of &lt;code&gt;godaddy.com&lt;/code&gt;&amp;#8217;s. Not good.&lt;/p&gt;

&lt;p&gt;The solution lies in a little-known environment variable that controls your terminal language and character set, &amp;#8220;LC_ALL&amp;#8221; (actually, LC_LOCALE but LC_ALL works too). If you set that bit of magic to &amp;#8220;C&amp;#8221;, things work as you would expect.&lt;/p&gt;

&lt;p&gt;By default on most modern linux installs, the system locale defaults to US-english using UTF-8 character set. Beyond setting language and such, it also sets things like how characters are ordered as far as a computer is concerned. For whatever reason, punctuation is handled as &amp;#8220;higher&amp;#8221; than letters, even though they are &amp;#8220;lower&amp;#8221; in the standard character set charts, and because &lt;code&gt;sort&lt;/code&gt; uses &lt;code&gt;strcmp&lt;/code&gt;, character ordering is very important.&lt;/p&gt;

&lt;p&gt;So there you go. If you are trying to sort a ton of data, and it&amp;#8217;s not coming out sorted, give &lt;code&gt;export LC_ALL=C&lt;/code&gt; a try. It worked for me!&lt;/p&gt;</content>
  </entry>
  
  <entry>
    <id>http://dev.aboutus.org/2011/04/08/initial-commit</id>
    <link type="text/html" rel="alternate" href="http://dev.aboutus.org/2011/04/08/initial-commit.html"/>
    <title>Initial Commit</title>
    <updated>2011-04-08T00:00:00-07:00</updated>
    <author>
      <name>sam</name>
      <uri>http://dev.aboutus.org/</uri>
    </author>
    <content type="html">&lt;p&gt;This is the first post for AboutUs&amp;#8217; programming blog. The blog&amp;#8217;s powered by git, jekyll and nginx. To create a post we create a text file in the git repository in our favorite editor (i.e. vim). The posts go in a &lt;code&gt;_posts&lt;/code&gt; directory and look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devblog [master*] $ ls _posts

_posts:
2011-04-08-initial-commit.markdown&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href='http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html'&gt;Jekyll&lt;/a&gt; is used to convert the content textile, markdown, and html templates into a static html site.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devblog [master*] $ jekyll
Configuration from /www/aboutus/devblog/_config.yml
Building site: . -&amp;gt; ./_site
Successfully generated site: . -&amp;gt; ./_site&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyll&amp;#8217;s &lt;code&gt;--auto&lt;/code&gt; option is pretty nice for development. It regenerates the site every time you save a file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devblog [master*] $ jekyll --auto
Configuration from /www/aboutus/devblog/_config.yml
Auto-regenerating enabled: . -&amp;gt; ./_site
[2011-04-11 20:49:52] regeneration: 8 files changed
[2011-04-11 20:50:22] regeneration: 1 files changed
[2011-04-11 20:50:27] regeneration: 1 files changed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On the server jekyll generates static html files for nginx to serve.&lt;/p&gt;

&lt;p&gt;It barely has &lt;em&gt;any&lt;/em&gt; dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devblog # gem install jekyll --no-rdoc --no-ri
Building native extensions.  This could take a while...
Successfully installed liquid-2.2.2
Successfully installed fast-stemmer-1.0.0
Successfully installed classifier-1.3.3
Successfully installed directory_watcher-1.4.0
Successfully installed syntax-1.0.0
Successfully installed maruku-0.6.0
Successfully installed jekyll-0.10.0
7 gems installed&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;#8217;s a git post-receive hook that regenerates the site whenever someone pushes a change.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devblog # vi .git/hooks/post-receive
#!/bin/sh
#
GIT_REPO=/www/aboutus/devblog.git
TMP_GIT_CLONE=/tmp/devblog
PUBLIC_WWW=/www/aboutus/devblog

git clone $GIT_REPO $TMP_GIT_CLONE
jekyll --no-auto $TMP_GIT_CLONE $PUBLIC_WWW
rm -Rf $TMP_GIT_CLONE
exit&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nginx serves the static files in &lt;code&gt;/www/aboutus/devblog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Deploying is just a &lt;code&gt;git push&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;devblog [master] $ git push 
Counting objects: 23, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (12/12), 925 bytes, done.
Total 12 (delta 6), reused 0 (delta 0)
remote: Initialized empty Git repository in /tmp/devblog/.git/
remote: Configuration from /tmp/devblog/_config.yml
remote: Building site: /tmp/devblog -&amp;gt; /www/aboutus/devblog
remote: Successfully generated site: /tmp/devblog -&amp;gt; /www/aboutus/devblog
Killed by signal 1.
To blog@devblog:/www/aboutus/devblog.git
   12aa781..ab54f06  master -&amp;gt; master&lt;/code&gt;&lt;/pre&gt;</content>
  </entry>
  
 
</feed>

